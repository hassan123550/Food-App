import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import Ionicons from 'react-native-vector-icons/Ionicons';

// Sample order summary data
const orderSummary = {
  items: [
    { name: 'Double Cheeseburger', quantity: 2, price: 12.99 },
    { name: 'French Fries', quantity: 1, price: 4.99 },
    { name: 'Chocolate Shake', quantity: 1, price: 5.99 },
  ],
  subtotal: 36.96,
  deliveryFee: 2.99,
  tax: 2.84,
  total: 42.79,
};
// Sample saved addresses
const savedAddresses = [
  { id: '1', name: 'Home', address: '123 Main St, Apt 4B, New York, NY 10001' },
  { id: '2', name: 'Work', address: '456 Office Blvd, Suite 300, New York, NY 10002' },
];
// Sample payment methods
const paymentMethods = [
  { id: '1', type: 'card', name: 'Credit Card', last4: '1234', icon: 'card-outline' },
  { id: '2', type: 'card', name: 'Debit Card', last4: '5678', icon: 'card-outline' },
  { id: '3', type: 'cash', name: 'Cash on Delivery', icon: 'cash-outline' },
];
const CheckoutScreen = ({ navigation }) => {
  const [selectedAddress, setSelectedAddress] = useState(savedAddresses[0].id);
  const [selectedPayment, setSelectedPayment] = useState(paymentMethods[0].id);
  const [tipAmount, setTipAmount] = useState(4); // Default tip
  const [specialInstructions, setSpecialInstructions] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);

  const tipOptions = [0, 2, 4, 6];

  const totalWithTip = orderSummary.total + tipAmount;

  const handlePlaceOrder = () => {
    setIsProcessing(true);

    // Simulate order processing
    setTimeout(() => {
      setIsProcessing(false);
      // Navigate to order status screen
      navigation.navigate('OrderStatus', { orderId: 'ORD-' + Math.floor(1000 + Math.random() * 9000) });
    }, 2000);
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
        <View style={styles.header}>
          <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
            <Ionicons name="arrow-back" size={24} color="#333" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Checkout</Text>
        </View>

        <ScrollView style={styles.scrollView}>
          {/* Delivery Address Section */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Delivery Address</Text>
            {savedAddresses.map(address => (
              <TouchableOpacity
                key={address.id}
                style={[
                  styles.addressItem,
                  selectedAddress === address.id && styles.selectedItem,
                ]}
                onPress={() => setSelectedAddress(address.id)}
              >
                <View style={styles.addressInfo}>
                  <View style={styles.addressHeader}>
                    <Text style={styles.addressName}>{address.name}</Text>
                    {selectedAddress === address.id && (
                      <Ionicons name="checkmark-circle" size={20} color="#FF4500" />
                    )}
                  </View>
                  <Text style={styles.addressText}>{address.address}</Text>
                </View>
              </TouchableOpacity>
            ))}

            <TouchableOpacity style={styles.addNewButton}>
              <Ionicons name="add" size={18} color="#FF4500" />
              <Text style={styles.addNewText}>Add New Address</Text>
            </TouchableOpacity>
          </View>

          {/* Payment Method Section */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Payment Method</Text>
            {paymentMethods.map(method => (
              <TouchableOpacity
                key={method.id}
                style={[
                  styles.paymentItem,
                  selectedPayment === method.id && styles.selectedItem,
                ]}
                onPress={() => setSelectedPayment(method.id)}
              >
                <Ionicons name={method.icon} size={24} color="#666" />
                <View style={styles.paymentInfo}>
                  <Text style={styles.paymentName}>{method.name}</Text>
                  {method.type === 'card' && (
                    <Text style={styles.paymentDetail}>**** **** **** {method.last4}</Text>
                  )}
                </View>
                {selectedPayment === method.id && (
                  <Ionicons name="checkmark-circle" size={20} color="#FF4500" />
                )}
              </TouchableOpacity>
            ))}

            <TouchableOpacity style={styles.addNewButton}>
              <Ionicons name="add" size={18} color="#FF4500" />
              <Text style={styles.addNewText}>Add Payment Method</Text>
            </TouchableOpacity>
          </View>

          {/* Tip Section */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Add a Tip</Text>
            <View style={styles.tipOptions}>
              {tipOptions.map(option => (
                <TouchableOpacity
                  key={option}
                  style={[
                    styles.tipOption,
                    tipAmount === option && styles.selectedTip,
                  ]}
                  onPress={() => setTipAmount(option)}
                >
                  <Text style={[
                    styles.tipText,
                    tipAmount === option && styles.selectedTipText,
                  ]}>
                    {option === 0 ? 'No Tip' : `$${option.toFixed(2)}`}
                  </Text>
                </TouchableOpacity>
              ))}
              <TouchableOpacity
                style={[
                  styles.tipOption,
                  !tipOptions.includes(tipAmount) && styles.selectedTip,
                ]}
                onPress={() => {
                  Alert.prompt(
                    'Custom Tip',
                    'Enter custom tip amount',
                    [
                      {
                        text: 'Cancel',
                        style: 'cancel',
                      },
                      {
                        text: 'OK',
                        onPress: (value) => {
                          const customTip = parseFloat(value);
                          if (!isNaN(customTip) && customTip >= 0) {
                            setTipAmount(customTip);
                          }
                        },
                      },
                    ],
                    'plain-text',
                    '',
                    'numeric'
                  );
                }}
              >
                <Text style={[
                  styles.tipText,
                  !tipOptions.includes(tipAmount) && styles.selectedTipText,
                ]}>
                  {!tipOptions.includes(tipAmount) ? `$${tipAmount.toFixed(2)}` : 'Custom'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Special Instructions */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Special Instructions (Optional)</Text>
            <TextInput
              style={styles.instructionsInput}
              placeholder="Add notes for the restaurant or delivery driver..."
              placeholderTextColor="#999"
              multiline
              value={specialInstructions}
              onChangeText={setSpecialInstructions}
            />
          </View>

          {/* Order Summary */}
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Order Summary</Text>
            {orderSummary.items.map((item, index) => (
              <View key={index} style={styles.orderItem}>
                <Text style={styles.orderItemQuantity}>{item.quantity}x</Text>
                <Text style={styles.orderItemName}>{item.name}</Text>
                <Text style={styles.orderItemPrice}>${(item.price * item.quantity).toFixed(2)}</Text>
              </View>
            ))}

            <View style={styles.divider} />

            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Subtotal</Text>
              <Text style={styles.summaryValue}>${orderSummary.subtotal.toFixed(2)}</Text>
            </View>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Delivery Fee</Text>
              <Text style={styles.summaryValue}>${orderSummary.deliveryFee.toFixed(2)}</Text>
            </View>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Tax</Text>
              <Text style={styles.summaryValue}>${orderSummary.tax.toFixed(2)}</Text>
            </View>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Driver Tip</Text>
              <Text style={styles.summaryValue}>${tipAmount.toFixed(2)}</Text>
            </View>

            <View style={styles.divider} />

            <View style={styles.totalRow}>
              <Text style={styles.totalLabel}>Total</Text>
              <Text style={styles.totalValue}>${totalWithTip.toFixed(2)}</Text>
            </View>
          </View>
        </ScrollView>

        <View style={styles.checkoutButtonContainer}>
          <TouchableOpacity
            style={[styles.placeOrderButton, isProcessing && styles.processingButton]}
            onPress={handlePlaceOrder}
            disabled={isProcessing}
          >
            {isProcessing ? (
              <Text style={styles.placeOrderButtonText}>Processing...</Text>
            ) : (
              <>
                <Text style={styles.placeOrderButtonText}>Place Order</Text>
                <Text style={styles.placeOrderPrice}>${totalWithTip.toFixed(2)}</Text>
              </>
            )}
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8F8',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 15,
    paddingVertical: 15,
    backgroundColor: '#FFF',
    borderBottomWidth: 1,
    borderBottomColor: '#EEE',
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  scrollView: {
    flex: 1,
  },
  section: {
    backgroundColor: '#FFF',
    borderRadius: 12,
    marginHorizontal: 15,
    marginVertical: 10,
    padding: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  addressItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderRadius: 8,
    backgroundColor: '#F8F8F8',
    marginBottom: 10,
    paddingHorizontal: 12,
  },
  selectedItem: {
    backgroundColor: '#FFF9F6',
    borderWidth: 1,
    borderColor: '#FFDDD3',
  },
  addressInfo: {
    flex: 1,
  },
  addressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  addressName: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#333',
  },
  addressText: {
    fontSize: 14,
    color: '#666',
    marginTop: 5,
    lineHeight: 20,
  },
  addNewButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
  },
  addNewText: {
    color: '#FF4500',
    fontSize: 14,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  paymentItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    borderRadius: 8,
    backgroundColor: '#F8F8F8',
    marginBottom: 10,
    paddingHorizontal: 12,
  },
  paymentInfo: {
    flex: 1,
    marginLeft: 12,
  },
  paymentName: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#333',
  },
  paymentDetail: {
    fontSize: 14,
    color: '#888',
    marginTop: 2,
  },
  tipOptions: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 5,
  },
  tipOption: {
    backgroundColor: '#F8F8F8',
    paddingVertical: 10,
    paddingHorizontal: 15,
    borderRadius: 8,
    marginRight: 10,
    marginBottom: 10,
    minWidth: 70,
    alignItems: 'center',
  },
  selectedTip: {
    backgroundColor: '#FFF2F0',
    borderWidth: 1,
    borderColor: '#FFDDD3',
  },
  tipText: {
    color: '#666',
    fontSize: 14,
    fontWeight: '500',
  },
  selectedTipText: {
    color: '#FF4500',
    fontWeight: 'bold',
  },
  instructionsInput: {
    backgroundColor: '#F8F8F8',
    borderRadius: 8,
    padding: 12,
    height: 80,
    textAlignVertical: 'top',
    fontSize: 15,
    color: '#333',
  },
  orderItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  orderItemQuantity: {
    fontSize: 14,
    color: '#888',
    marginRight: 10,
    width: 25,
  },
  orderItemName: {
    flex: 1,
    fontSize: 14,
    color: '#333',
  },
  orderItemPrice: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
  },
  divider: {
    height: 1,
    backgroundColor: '#EEE',
    marginVertical: 15,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  summaryLabel: {
    fontSize: 14,
    color: '#888',
  },
  summaryValue: {
    fontSize: 14,
    color: '#333',
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  totalLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  totalValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#FF4500',
  },
  checkoutButtonContainer: {
    backgroundColor: '#FFF',
    borderTopWidth: 1,
    borderTopColor: '#EEE',
    padding: 15,
  },
  placeOrderButton: {
    backgroundColor: '#FF4500',
    borderRadius: 12,
    paddingVertical: 15,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
  },
  processingButton: {
    backgroundColor: '#FFA07A',
    justifyContent: 'center',
  },
  placeOrderButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  placeOrderPrice: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
export default CheckoutScreen;
